
<!DOCTYPE html>
<html lang="en">

<head>
    
    
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
    
    <style>
        
        body {
            background-color: #5a5f60; /* Updated background color */
            font-family: 'Arial', sans-serif; /* Updated font family */
            font-size: 20px;
            display: flex;
            flex-direction: row;
            justify-content: space-around; /* Center elements horizontally */
            align-items: center; /* Center elements vertically */
            height: 100vh; /* Full height of the viewport */
            margin: 0;
        }

        button {
            background-color: #6e75b8; /* Updated button color */
            font-size: 18px;
            padding: 10px 15px;
            font-family: 'Impact', sans-serif; /* Updated font family */
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        input {
            width: 250px;
            height: 30px;
            font-size: 16px;
            font-family: 'Arial', sans-serif; /* Updated font family */
            outline: none;
            margin-bottom: 10px;
        }

        #readArea,
        #writeArea {
            flex-basis: 45%;
            padding: 12px;
            background-color: #d1d7e7; /* Updated background color */
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2); /* Added box shadow */
        }

        button:hover {
            background-color: #d04b53; /* Updated button color on hover */
        }

        h1 {
            font-size: 30px;
            color: #0a0808;
        }
        h3 {
            font-size: 30px;
            color: hsl(216, 68%, 54%);
        }
        h2 {
            font-size: 30px;
            color: hsl(0, 70%, 61%);
        }

        p {
            font-size: 16px;
            color: #333;
        }

    </style>
</head>

<body>

    <div id="readArea">
        
        <br><br>
        <hr>
        <!-- READING FROM CONTRACT -->
        <h1>YOUR WALLET DETAILS </h1>
        
        <hr>
        <br>
        <button onclick="connectMetamask()">CONNECT TO YOUR WALLET</button>
        <p id="userArea">Status: Not connected to Metamask</p>
        <br>
        <!-- index html to meta-->

        <button onclick="connectContract()">CONNECT TO CONTRACT</button>
        <p id="contractArea">Status: Not connected to Contract</p>
        <!-- meta to SC -->
        <br>
        <!-- <button onclick="getContractAccount()"> GET CONTRACT ACCOUNT </button>
        <p id="contractAccount">Contract Account: Not Connected to Contract</p> -->
        <!-- CAlling the function designed in Transactions.sol get deployment addresss -->

        <button onclick="getBalanceApple()">GET BALANCE OF THE CONTRACT</button>
        <p id="balanceArea">Balance: Not Connected to Contract</p>
        <!-- CAlling the function designed in Transactions.sol get balance -->
        <br>

    </div>

    <div id="writeArea">
        <!-- WRITING TO CONTRACT -->
        <br>
        <hr>
        <h1>REGISTER NOW AND BECOME PART OF ROAD2HELL! </h1>
        <hr>
        <h3>Coach Name : Rohith Nair </h3>
        <h1>Your assigned coach's wallet address : </h1>
        <h2>0x0ebbeA58976E4C9fE9DCf8fc7E7B5B668e6a56CA</h2>
        
        <!-- <button onclick="depositContract()">Send ether to the Contract</button><br>
        
        <input type="number" id="depositInput" placeholder="Enter Amount"><br> <br> -->
        <!-- Deposit to contract calling on deposit function -->
        <input type="text" id="addressInput" placeholder="Enter Address"> <br>
        <input type="number" id="amountInput" placeholder="Enter Amount">
        <br>
        <button onclick="withdraw()">MAKE PAYMENT</button> <br><br>
        <!-- CAlling the function designed in Transactions.sol -->
        <!-- calling the withdraw function -->
    </div>

    <script>
        let account;
        const connectMetamask = async () => {
            if(window.ethereum !== "undefined") {
                const accounts = await ethereum.request({method: "eth_requestAccounts"});
                account = accounts[0];
                document.getElementById("userArea").innerHTML = `User Account: ${account}`;
            }
        }

        const connectContract = async () => {
            const ABI =   [
	{
		"inputs": [],
		"name": "deposit",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address payable",
				"name": "_to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "withdraw",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getAddress",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
] ;
            const Address = "0x20f5618b7a9469f83a48d4ef30d07b9311dcbdbe"; // Taking Address from Remix 
            window.web3 = await new Web3(window.ethereum);
            window.contract = await new window.web3.eth.Contract(ABI, Address);
            document.getElementById("contractArea").innerHTML = "Connected to Contract"; // calling the elementID above
        }

        const getContractAccount = async () => {
            const data = await window.contract.methods.getAddress().call();
            document.getElementById("contractAccount").innerHTML = `Contract Account: ${data}`;
        }

        const getBalanceApple = async () => { // const getBalanceApple is the HTML function & .contract.getBalance is the smart contract function
            const data = await window.contract.methods.getBalance().call();
            document.getElementById("balanceArea").innerHTML = `Contract Balance: ${data}`;
        }

        const depositContract = async () => {
            const amount = document.getElementById("depositInput").value;
            await window.contract.methods.deposit().send({from: account, value: amount});
        }

        const withdraw = async () => {
            const amount = document.getElementById("amountInput").value;
            const address = document.getElementById("addressInput").value;
            await window.contract.methods.withdraw(address, amount).send({from: account});
        }
    </script>

</body>

</html>

